# Generated by Django 3.0.8 on 2020-07-27 03:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='client', max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DayRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('cur_token', models.CharField(default='$', max_length=1)),
                ('cur_per_day', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='discipline', max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dispute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(max_length=1008)),
                ('notes', models.CharField(blank=True, max_length=32000, null=True)),
                ('resolved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(default=0, unique=True)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='employees', to='temapi.Discipline')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('number', models.PositiveIntegerField(default=1, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=256, unique=True)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='discipline', to='temapi.Discipline')),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('cur_token', models.CharField(default='$', max_length=1)),
                ('cur_per_hr', models.FloatField(default=0)),
                ('ot_cur_per_hr', models.FloatField(default=0)),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='rates', to='temapi.Position')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='region', max_length=256, unique=True)),
                ('clients', models.ManyToManyField(to='temapi.Client')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='site', max_length=256, unique=True)),
                ('lat', models.FloatField(default=0)),
                ('lon', models.FloatField(default=0)),
                ('clients', models.ManyToManyField(to='temapi.Client')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sites', to='temapi.Region')),
            ],
        ),
        migrations.CreateModel(
            name='Worklog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(max_length=32000)),
                ('approved', models.BooleanField(default=False)),
                ('disputed', models.BooleanField(default=False)),
                ('date', models.DateField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='worklogs', to='temapi.Client')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='worklogs', to='temapi.Site')),
            ],
        ),
        migrations.CreateModel(
            name='RateSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='rate_sheets', to='temapi.Client')),
                ('day_rates', models.ManyToManyField(to='temapi.DayRate')),
                ('rates', models.ManyToManyField(to='temapi.Rate')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='rate_sheets', to='temapi.Region')),
            ],
        ),
        migrations.CreateModel(
            name='ManHoursCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.FloatField(default=0)),
                ('date', models.DateField(auto_now=True)),
                ('dispute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='manhours_charges', to='temapi.Dispute')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='charges', to='temapi.Employee')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='charges', to='temapi.Position')),
                ('worklog', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='manhours_charges', to='temapi.Worklog')),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours', models.FloatField(default=0)),
                ('date', models.DateField(auto_now=True)),
                ('dispute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='equipment_charges', to='temapi.Dispute')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='charges', to='temapi.Equipment')),
                ('worklog', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='equipment_charges', to='temapi.Worklog')),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='employees', to='temapi.Position'),
        ),
        migrations.AddField(
            model_name='dispute',
            name='worklog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='disputes', to='temapi.Worklog'),
        ),
        migrations.AddField(
            model_name='dayrate',
            name='equipment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='day_rates', to='temapi.Equipment'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=256, unique=True, verbose_name='email')),
                ('phone', models.CharField(max_length=256, unique=True)),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Manager'), (2, 'Client'), (3, 'Employee')], null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='temapi.Client')),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='temapi.Employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
